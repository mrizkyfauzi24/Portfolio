import numpy as np
import pandas as pd
[33]
df = pd.read_csv('Bank Customer Churn Prediction.csv')
[34]
df.head()
Label Encoding
[35]
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
[49]
df['gender'] = le.fit_transform(df['gender'])
df['country'] = le.fit_transform(df['country'])

df.head(3)
Six Questions
[50]
df.shape
(10000, 12)
[38]
df.isnull().sum()
 [39]
df.duplicated().sum()
0
[40]
df.info()
 [41]
df.describe()
EDA
[42]
corr = df.corr()
[43]
corr
[44]
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10,8))
sns.heatmap(corr,annot=True,cbar=True,cmap='coolwarm')
<AxesSubplot:>

[45]
df.info()
< 
 
[46]
sns.histplot(df['credit_card'],bins=20)
<AxesSubplot:xlabel='credit_card', ylabel='Count'>

[47]
sns.boxplot(df['age'])
<AxesSubplot:>

[51]
sns.countplot(x=df['gender'])
<AxesSubplot:xlabel='gender', ylabel='count'>

Train Test Split
[52]
from sklearn.model_selection import train_test_split
[54]
X = df.drop(['churn','customer_id'],axis=1)
y = df['churn']
[55]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
Standrization
[67]
from sklearn.preprocessing import StandardScaler
sclr = StandardScaler()
[68]
X_train = sclr.fit_transform(X_train)
X_test = sclr.fit_transform(X_test)
training model
[69]
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble  import RandomForestClassifier
from sklearn.metrics import accuracy_score
[70]
models = {
    'lg':LogisticRegression(),
    'dtc':DecisionTreeClassifier(),
    'rfc':RandomForestClassifier(),
}
[71]
for name,model in models.items():
    model.fit(X_train,y_train)
    ypred = model.predict(X_test)
    print(f"{name} with accuracy : {accuracy_score(y_test,ypred)} ")
lg with accuracy : 0.8155 
dtc with accuracy : 0.788 
rfc with accuracy : 0.871 
model selection
[75]
rfc = RandomForestClassifier()
rfc.fit(X_train,y_train)
ypred = model.predict(X_test)
prediction system
[81]
def prediction(credit_score,country,gender,age,tenure,balance,products_number,credit_card,active_member,estimated_salary):
    features = np.array([[credit_score,country,gender,age,tenure,balance,products_number,credit_card,active_member,estimated_salary]])
    features = sclr.fit_transform(features)
    prediction = rfc.predict(features).reshape(1,-1)
    return prediction[0]

credit_score = 608
country = 2
gender = 0
age= 41
tenure= 1
balance = 83807.86
products_number= 1
credit_card = 0
active_member =1
estimated_salary = 112542.58

pred  = prediction(credit_score,country,gender,age,tenure,balance,products_number,credit_card,active_member,estimated_salary)
[84]
if pred == 1:
    print("he left the compnay")
else:
    print("he is there still")
he is there still
[85]
import pickle
pickle.dump(df,open('df.pkl','wb'))
pickle.dump(rfc,open('rfc.pkl','wb'))


import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import pickle

sclr = StandardScaler()

# loading models
df = pickle.load(open('df.pkl', 'rb'))
rfc = pickle.load(open('rfc.pkl', 'rb'))

def prediction(credit_score, country, gender, age, tenure, balance, products_number, credit_card, active_member, estimated_salary):
    # Check for empty strings and handle accordingly
    if credit_score == '':
        st.error("Please provide a valid credit score.")
        return None
    if country == '':
        st.error("Please provide a valid country.")
        return None
    if gender == '':
        st.error("Please provide a valid gender.")
        return None
    if age == '':
        st.error("Please provide a valid age.")
        return None
    if tenure == '':
        st.error("Please provide a valid tenure.")
        return None
    if balance == '':
        st.error("Please provide a valid balance.")
        return None
    if products_number == '':
        st.error("Please provide a valid number of products.")
        return None
    if credit_card == '':
        st.error("Please provide a valid credit card status.")
        return None
    if active_member == '':
        st.error("Please provide a valid active member status.")
        return None
    if estimated_salary == '':
        st.error("Please provide a valid estimated salary.")
        return None

    features = np.array([[float(credit_score), country, gender, float(age), float(tenure), float(balance), float(products_number), float(credit_card), float(active_member), float(estimated_salary)]])
    features = sclr.fit_transform(features)  # Scale the country column
    prediction = rfc.predict(features).reshape(1, -1)
    return prediction[0]

# web app
st.title('Bank Customer Churn Prediction')
credit_score = st.number_input('Credit Score')
country = st.text_input('Country')
gender = st.text_input('Gender')
age = st.number_input('Age')
tenure = st.number_input('Tenure')
balance = st.number_input('Balance')
products_number = st.number_input('Products Number')
credit_card = st.number_input('Credit Card')
active_member = st.number_input('Active Member')
estimated_salary = st.number_input('Estimated Salary')

if st.button('Predict'):
    pred = prediction(credit_score, country, gender, age, tenure, balance, products_number, credit_card, active_member, estimated_salary)

    if pred is not None:
        if pred == 1:
            st.write("The customer has left.")
        else:
            st.write("The customer is still active.")